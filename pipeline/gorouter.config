input {
  file {
    path => "/support/logs/gorouter/*"
    start_position => "beginning"
  }
}

filter {
  if [path] =~ "access" {
    mutate { replace => { "type" => "gorouter_access" } }
    grok {
      patterns_dir => ["/support/patterns"]
      match => { "message" => "%{HOSTNAME:hostname} - \[%{GOROUTER_TIMESTAMP:datetime}\] \"%{WORD:request_method} %{GREEDYDATA:request_path} %{GOROUTER_HTTPVERSION:http_version}\" %{NUMBER:response_code} %{NUMBER:bytes_sent} %{NUMBER:bytes_received} \"-\" \"%{GREEDYDATA:request_client}\" x_forwarded_for:\"%{DATA:x_forwarded_for}\" x_forwarded_proto:\"%{WORD:x_forwarded_proto}\" vcap_request_id:\"%{DATA:vcap_request_id}\" response_time:%{NUMBER:response_time} app_id:\"%{DATA:app_id}\" app_index:\"%{DATA:app_index}\" x_b3_traceid:\"%{DATA:x_b3_traceid}\" x_b3_spanid:\"%{DATA:x_b3_spanid}\" x_b3_parentspanid:\"%{DATA:x_b3_parentspanid}\""}
    }

  date {
    match => [ "datetime" , "yyyy-MM-dd'T'HH:mm:ss.SSSZ" ]
    target => "@timestamp"
  }
  }
  else if [path] =~ "gorouter.stdout" {
    mutate { 
      replace => { "type" => "gorouter_stdout" } 
      convert => { 
        "data.status" => "string" 
        "timestamp" => "string"
      }
    }
    json {
      source =>"message"

    }
   date {
    match => [ "timestamp" , "UNIX" ]
    target => "@timestamp"
  }
  }
  
}

output {
  elasticsearch {
    hosts => ["my.es.local:9200"]
  }
  stdout { codec => rubydebug }
}

